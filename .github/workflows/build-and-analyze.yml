name: .NET Analysis
on:
  push:
    branches: [main]
    paths-ignore:
      - 'test/k6/**'
      - '.github/**'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  build-test-analyze:
    name: Build, test & analyze
    runs-on: ubuntu-latest
    services:
      postgres: # note that updating this image might break the pipeline if the agent doesn't support the new version
        image: postgres:16@sha256:3264898409adb05925064daab9158c2d43ff9ad5d8fbcfdb5aad3a937240da7a
        env:
          POSTGRES_USER: platform_notifications_admin
          POSTGRES_PASSWORD: Password
          POSTGRES_DB: notificationsdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: |
            9.0.x
      - name: Set up Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: 17
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install SonarCloud scanners
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Setup PostgreSQL
        run: |
          chmod +x dbsetup.sh
          ./dbsetup.sh
      - name: Restart database to enable config changes
        run: |
          # Restart only the Postgres service
          docker ps \
            --filter "ancestor=postgres:16@sha256:fec2740c517838d4f582e48a8a9a1cb51082af3dcae59e9b12a66ec262302b97" \
            -q \
          | xargs docker restart
      - name: Set up Kafka
        uses: ybyzek/cp-all-in-one-action@58cb2014706e386a7207356586a4fd64b6a9f7ab # v0.2.1
        with:
          service: broker
      - name: Sleep for 30 seconds to allow Kafka to start
        uses: GuillaumeFalourd/wait-sleep-action@175a644657d8de245e4c6059d014941646186a84 # v1
        with:
          time: '30s'
      - name: Build & Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"Altinn_altinn-notifications" /o:"altinn" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="src/Altinn.Notifications.Persistence/Migration/**/*"

          dotnet build Altinn.Notifications.sln -v q

          dotnet test Altinn.Notifications.sln \
          -v q \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/ \
          --logger "trx;" \
          --configuration release \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Complete sonar analysis
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: TestResults
          path: '**/TestResults/*.trx'
      - name: Process unit test result
        if: always()
        uses: NasAmin/trx-parser@359b39f5319df4478443ef1f0eb952f159896995 # v0.7.0
        with:
          TRX_PATH: ${{ github.workspace }}/TestResults
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
